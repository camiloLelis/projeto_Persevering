name: Deploy to AWS

on:
  push:
    branches:
      - refine2  # Deploy automático ao fazer push na branch "main"

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: |
        docker build -t node_app:latest .

    - name: Save Docker image to file
      run: |
        docker save node_app:latest | gzip > node_app_latest.tar.gz

    - name: Copy Docker image to EC2
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "node_app_latest.tar.gz"
        target: "/home/${{ secrets.EC2_USER }}/node_app_latest.tar.gz"

    - name: SSH into EC2 and Deploy
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          gunzip -c /home/${{ secrets.EC2_USER }}/node_app_latest.tar.gz | docker load
          mkdir -p /home/${{ secrets.EC2_USER }}/api  # Cria a pasta "api" se não existir
          cd /home/${{ secrets.EC2_USER }}/api  # Acessa a pasta "api"
          echo "NODE_ENV=development" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "EMAIL=${{ secrets.EMAIL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "PORT=${{secrets.PORT}}" >> .env
          echo "ORIGIN_URL_FRONTEND=${{secrets.ORIGIN_URL_FRONTEND}}" >> .env
          docker-compose down  # Para o contêiner atual, se estiver rodando
          docker-compose up -d  # Sobe o novo contêiner com as novas variáveis de ambiente